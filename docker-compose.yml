version: '2.2'
services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    container_name: es01
    environment:
      - discovery.type=single-node
      - network.host=0.0.0.0
    ports:
      - 9200:9200
    networks:
      - elastic

  # kib01:
  #   image: docker.elastic.co/kibana/kibana:7.15.1
  #   container_name: kib01
  #   ports:
  #     - 5601:5601
  #   environment:
  #     ELASTICSEARCH_URL: http://es01:9200
  #     ELASTICSEARCH_HOSTS: http://es01:9200
  #   networks:
  #     - elastic
  #   depends_on:
  #     - es01

  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:7.15.1
  #   container_name: filebeat
  #   restart: always
  #   user: root
  #   volumes:
  #     - ./logs:/app/logs
  #     - ./docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #   networks:
  #     - elastic
  #   depends_on:
  #     - logstash

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:7.15.1
  #   container_name: logstash
  #   restart: always
  #   user: root
  #   environment:
  #     - monitoring.elasticsearch.hosts=http://es01:9200
  #   volumes:
  #     - ./docker/logstash.yml:/usr/share/logstash/config/logstash.yml
  #     - ./docker/pipelines.yml/:/usr/share/logstash/config/pipelines.yml
  #     - ./docker/logstash.conf:/usr/share/logstash/config/pipeline/logstash.conf
  #   ports:
  #     - 5044:5044
  #   networks:
  #     - elastic
  #   depends_on:
  #     - es01

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      - kafka

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    restart: always
    env_file:
      - .env.local
    ports:
      - 9092:9092
    networks:
      - kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 30s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - db
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  postgres:
    image: 'postgres:latest'
    container_name: postgres
    restart: always
    env_file:
      - .env
    ports:
      - 5432:5432
    volumes:
      - ./dbdata:/var/lib/postgresql/data
      - ./dbscripts:/docker-entrypoint-initdb.d
    networks:
      - db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 50

networks:
  elastic:
    driver: bridge
  db:
    driver: bridge
  kafka:
    driver: bridge
